import os
import re
import asyncpg
import pandas as pd
from tempfile import NamedTemporaryFile
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    CallbackQueryHandler, MessageHandler, CommandHandler,
    ConversationHandler, filters, ContextTypes
)

from dotenv import load_dotenv
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()]

(
    WAITING_VIDEO_LINKS,
    WAITING_SCORE,
    WAITING_COMMENT,
    WAITING_AUTHOR_COMMENT
) = range(4)

URL_REGEX = re.compile(
    r'^https?://(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.'
    r'[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$'
)

async def init_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ])
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=markup)

async def creative_session_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data='send_video_prompt')],
        [InlineKeyboardButton("‚≠ê –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data='start_review')],
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='download')],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='clear_table')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ])
    await update.callback_query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é!", reply_markup=markup)

creative_session_handler = CallbackQueryHandler(creative_session_menu, pattern='^creative_session$')

async def send_video_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("qeep", callback_data="video_cat_qeep")],
        [InlineKeyboardButton("Harley", callback_data="video_cat_Harley")],
        [InlineKeyboardButton("–ê–ª—Ç–µ—è", callback_data="video_cat_–ê–ª—Ç–µ—è")]
    ]
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

async def select_video_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    category = update.callback_query.data.split("_")[-1]
    context.user_data["category"] = category
    await update.callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    return WAITING_VIDEO_LINKS

async def receive_video_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!")
        return WAITING_VIDEO_LINKS

    tokens = update.message.text.split()
    valid_links = [token.strip() for token in tokens if URL_REGEX.match(token)]

    if not valid_links:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏!")
        return WAITING_VIDEO_LINKS

    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END

    category = context.user_data.get("category")
    async with db_pool.acquire() as conn:
        for link in valid_links:
            await conn.execute(
                "INSERT INTO videos (link, category) VALUES ($1, $2) ON CONFLICT (link, category) DO NOTHING",
                link, category
            )

    if len(valid_links) == 1:
        context.user_data["uploaded_video"] = valid_links[0]
        keyboard = [
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="author_comment")],
            [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_author_comment")]
        ]
        await update.message.reply_text(
            "‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAITING_AUTHOR_COMMENT
    else:
        await update.message.reply_text(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(valid_links)}!")
        await back_to_menu(update, context)
        return ConversationHandler.END

async def prompt_author_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∏–¥–µ–æ:")
    return WAITING_AUTHOR_COMMENT

async def skip_author_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await back_to_menu(update, context)
    return ConversationHandler.END

async def receive_author_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END

    video_link = context.user_data.get("uploaded_video")
    category = context.user_data.get("category")
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE videos SET author_comment = $1 WHERE link = $2 AND category = $3",
            comment, video_link, category
        )

    await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≤—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await back_to_menu(update, context)
    return ConversationHandler.END

async def start_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("qeep", callback_data="rating_cat_qeep")],
        [InlineKeyboardButton("Harley", callback_data="rating_cat_Harley")],
        [InlineKeyboardButton("–ê–ª—Ç–µ—è", callback_data="video_cat_–ê–ª—Ç–µ—è")]
    ]
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∏–¥–µ–æ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

async def select_rating_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    category = update.callback_query.data.split("_")[-1]
    context.user_data["category"] = category
    return await ask_for_rating(update, context)

async def ask_for_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_pool = context.bot_data.get("db_pool")
    user_id = update.effective_user.id
    category = context.user_data.get("category")
    async with db_pool.acquire() as conn:
        video = await conn.fetchrow(
            """
            SELECT link FROM videos
            WHERE category = $2
              AND link NOT IN (
                  SELECT video_link FROM user_ratings
                  WHERE user_id = $1 AND category = $2
              )
            ORDER BY random() LIMIT 1
            """,
            user_id, category
        )

    if not video:
        await update.callback_query.message.reply_text("–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        await back_to_menu(update, context)
        return ConversationHandler.END

    context.user_data["current_video"] = video["link"]
    await update.callback_query.message.reply_text(f"–û—Ü–µ–Ω–∏—Ç–µ –≤–∏–¥–µ–æ –æ—Ç 1 –¥–æ 10:\n{video['link']}")
    return WAITING_SCORE

async def receive_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rating = int(update.message.text)
        if not 1 <= rating <= 10:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return WAITING_SCORE

    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END

    video_link = context.user_data.get("current_video")
    category = context.user_data.get("category")
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            UPDATE videos
            SET total_score = total_score + $1,
                ratings_count = ratings_count + 1,
                avg_score = (total_score + $1)::FLOAT / (ratings_count + 1)
            WHERE link = $2 AND category = $3
            """,
            rating, video_link, category
        )

    await update.message.reply_text("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return WAITING_COMMENT

async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END

    video_link = context.user_data.get("current_video")
    category = context.user_data.get("category")
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE videos SET comments = array_append(comments, $1) WHERE link = $2 AND category = $3",
            comment, video_link, category
        )
        await conn.execute(
            "INSERT INTO user_ratings (user_id, video_link, category) VALUES ($1, $2, $3)",
            update.effective_user.id, video_link, category
        )

    await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    return await ask_for_rating(update, context)

async def help_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "üé• –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
        "‚≠ê –û—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ ‚Äî –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
        "üì• –í—ã–≥—Ä—É–∑–∫–∞ ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
        "üßπ –û—á–∏—Å—Ç–∫–∞ ‚Äî –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."
    )

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_admin <id>")
        return

    try:
        new_id = int(context.args[0])
        if new_id not in ADMIN_IDS:
            ADMIN_IDS.append(new_id)
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {new_id}")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç ID —É–∂–µ –∞–¥–º–∏–Ω.")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    import traceback
    print("‚ùå –û—à–∏–±–∫–∞:", traceback.format_exc())

async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("qeep", callback_data="download_qeep")],
        [InlineKeyboardButton("Harley", callback_data="download_Harley")],
        [InlineKeyboardButton("–ê–ª—Ç–µ—è", callback_data="download_–ê–ª—Ç–µ—è")]
    ]
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def download_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    category = update.callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    db_pool = context.bot_data.get("db_pool")  # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    if not db_pool:
        await update.callback_query.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return

    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT link, avg_score, ratings_count, comments FROM videos WHERE category = $1",
            category
        )

    if not rows:
        await update.callback_query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    df = pd.DataFrame(rows, columns=["–°—Å—ã–ª–∫–∞", "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"])
    with NamedTemporaryFile(delete=False, suffix=".csv") as tmp:
        df.to_csv(tmp.name, index=False)
        tmp_path = tmp.name

    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=InputFile(tmp_path, filename=f"{category}_videos.csv")
    )
    os.remove(tmp_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏